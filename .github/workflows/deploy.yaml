name: Deploy to ECR

on:
 
  push:
    branches: 
      - main
      
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'information'
        type: choice
        options:
          - information
          - debug
          - warning
          - critical
      tags:
        description: 'Purpose of Run This Workflow?'
        required: true
        type: string
env:
  ECR_REPOSITORY: flask-app
  EKS_CLUSTER_NAME: Kubernetes-demo 
  AWS_REGION: us-east-1
  CORTEX_API_KEY: ${{secrets.CORTEX_API_KEY}}
  CORTEX_API_KEY_ID: ${{secrets.CORTEX_API_KEY_ID}}
  CORTEX_API_URL: https://api-emea-ccr.xdr.eu.paloaltonetworks.com
 
jobs:
  
  test-image:
    
    name: Deployment
    runs-on: ubuntu-latest
    steps:

    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t my-image-name:latest -f docker/Dockerfile .
  
  cortex-code-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 22

    - name: Verify Node.js Version
      run: node -v

    - name: Download cortexcli
      run: |
        set -x
        crtx_resp=$(curl "${CORTEX_API_URL}/public_api/v1/cli/releases/download-link?os=linux&architecture=amd64" \
          -H "x-xdr-auth-id: ${CORTEX_API_KEY_ID}" \
          -H "Authorization: ${CORTEX_API_KEY}")
        crtx_url=$(echo $crtx_resp | jq -r ".signed_url")
        curl -o cortexcli $crtx_url
        chmod +x cortexcli
        ./cortexcli --version

    - name: Run Cortex CLI Code Scan
      run: |
        ./cortexcli \
          --api-base-url "${CORTEX_API_URL}" \
          --api-key "${CORTEX_API_KEY}" \
          --api-key-id "${CORTEX_API_KEY_ID}" \
          code scan \
          --directory "${{github.workspace}}" \
          --repo-id "${{github.repository}}" \
          --branch "${{github.ref_name}}" \
          --source "GITHUB_ACTIONS" \
          --create-repo-if-missing

  build-push:

    name: Build-Push Docker Image
    runs-on: ubuntu-latest  
    steps:  
        - name: Checkout
          uses: actions/checkout@v2    

        - name: Set short git commit SHA
          id: commit
          uses: prompt/actions-commit-hash@v2

        - name: Check out code
          uses: actions/checkout@v2
  
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{env.AWS_REGION}}

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

        - name: Build, tag, and push image to Amazon ECR
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
            IMAGE_TAG: ${{ steps.commit.outputs.short }}
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f docker/Dockerfile .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

        - name: Update kube config
          run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

        - name: Deploy to EKS
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
            IMAGE_TAG: ${{ steps.commit.outputs.short }}
          run: |
            sed -i.bak "s|DOCKER_IMAGE|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" manifests/hello-app-deployment.yaml && \
            kubectl apply -f manifests/hello-app-deployment.yaml
            kubectl apply -f manifests/hello-app-service.yaml
